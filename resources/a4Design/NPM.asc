=== NPM

*NodeJs* is a JavaScript runtime environment. *npm* is a package manager for Node. It runs on Node, provides a command line interface for managing packages, and refers to a repository of packages available for use. An *npm* package is a JavaScript file with an accompanying metadata file called `package.json` (containing *name*, *version*, description, dependencies, ...).

Packages are typically _server side_ (ie tools like Grunt or Karma for running infrastructure) or _client side_ (ie libraries like angularjs or momentjs used within the application). NodeJs can be used for both _server side_ or _client side_ package management, but is typically used for _server side_ package management. *Bower* is typically used to manage _client side* packages. Bower does not handle nested dependencies whereas npm does.

The https://www.npmjs.com/[npm website] is a searchable repo of packages (like a maven repo).

Node installs in:

* /usr/local/lib/node_modules (global packages i.e. "-g" flag)
* /usr/local/bin (executables)
* /usr/local/share

npm comes with node.  Change the global library area to a local area rather than /usr/local/lib/node_modules:

.Set repository location
[source,bash]
----
gheinze@gheinze-t410:~$ mkdir npm-global
gheinze@gheinze-t410:~$ cd npm-global/
gheinze@gheinze-t410:~/npm-global$ npm config set prefix ~/npm-global
gheinze@gheinze-t410:~/npm-global$ sudo chown -R gheinze:gheinze ~/npm-global
gheinze@gheinze-t410:~/npm-global$ export PATH=~/npm-global/bin:$PATH
----

.Update npm
[source, bash]
----
gheinze@gheinze-t410:~/npm-global$ sudo npm install npm -g
npm http GET https://registry.npmjs.org/npm
npm http 200 https://registry.npmjs.org/npm
npm http GET https://registry.npmjs.org/npm/-/npm-2.4.1.tgz
npm http 200 https://registry.npmjs.org/npm/-/npm-2.4.1.tgz
/home/gheinze/npm-global/bin/npm -> /home/gheinze/npm-global/lib/node_modules/npm/bin/npm-cli.js
npm@2.4.1 /home/gheinze/npm-global/lib/node_modules/npm
----

.Install an npm package globally (-g)
Downloads the package into the lib directory, adds a symlink into the bin directory.
To update, run `npm install -g <pkg>` again.

[source, bash]
----
gheinze@gheinze-t410:~/npm-global$ npm install -g moment
npm http GET https://registry.npmjs.org/moment
npm http 304 https://registry.npmjs.org/moment
moment@2.9.0 /home/gheinze/npm-global/lib/node_modules/moment
----

.Install an npm package locally 
npm walks up the folder tree until it finds a `node_modules` or a `package.json` and uses that as the root. Run `npm root` to find your current root.

If you mkdir `node_modules` or create a `package.json` file, then it'll use the cwd.

[source, bash]
----
gheinze@gheinze-t410:~/scratch/my-app$ npm install lodash
npm http GET https://registry.npmjs.org/lodash
npm http 200 https://registry.npmjs.org/lodash
npm http GET https://registry.npmjs.org/lodash/-/lodash-3.1.0.tgz
npm http 200 https://registry.npmjs.org/lodash/-/lodash-3.1.0.tgz
lodash@3.1.0 ../node_modules/lodash
----

If the current directory has a `package.json` file, then `npm install` (without specifying a package) will install all the dependencies listed in the file.

.Node's "require"
Your JavaScript app can "import" a local package by calling Node's `require` function. This can make sense for your tooling scripts. For example:

----
var lodash = require('lodash');
var output lodash.without([1,2,3], 1);
console.log(output);
----

.Some npm commands

[optons="header"]
|===
|Command |Description

| npm ls | list all packages (can find extraneous packages, i.e. no dependency)
| npm outdated | using lated versions?
| npm config ls -l | config
| npm update | update
| npm uninstall <my package> --save | remove <my-package> and remove dependency from package.json (-g) for global...
| npm prune | remove extraneous packages
| npm init | create a new package: package.json, index.js, ...

|===


.npm configuration

Nice command:

----
npm config ls -l
----

From http://stackoverflow.com/questions/14742553/npm-local-install-package-to-custom-location[SO NPM config locations]:

You can do this by using the --prefix flag and the --global* flag.

----
$: ~/foo $ npm install bower -g --prefix ./vendor/node_modules
----

Even though this is a "global" installation, installed bins won't be accessible through the command line unless ~/foo/vendor/node_modules `exists in PATH`.

Every configurable attribute of npm can be set in any of six different places. In order of priority:

* Command-Line Flags: --prefix ./vendor/node_modules
* Environment Variables: NPM_CONFIG_PREFIX=./vendor/node_modules
* User Config File: $HOME/.npmrc or userconfig param
* Global Config File: $PREFIX/etc/npmrc or userconfig param
* Built-In Config File: path/to/npm/itself/npmrc
* Default Config: node_modules/npmconf/config-defs.js

By default, locally-installed packages go into ./node_modules. global ones go into the prefix config variable (/usr/local by default).

You can run npm config list to see your current config and npm config edit to change it.

.package.json
Metadata for a package.  Must contain name and version at a minimum.  Add a dependency manually or by running `npm install <my-dependency> --save`

[source, json]
----
{
    "name": "my-app",
    "version": "1.0.0",
    "dependencies": {
    "lodash": "^2.4.1"
    }
}
----

=== Semantic Versioning (SemVer)

==== x.y.z

* *z* patch release: bug fixes, minor changes
* *y* minor release: new features not breaking existing features
* *z* major release: breaking backward compatibility

[options="header"]
|===
|Symbol | Meaning
|1.0.0 | Release should start with 1.0.0
|1.0 or 1.0.x or ~1.0.4 | Accept only patch release
|1 or 1.x or ^1.0.4 | Accept minor release updates
|===

=== JavaScript Libraries

[options="header"]
|===
| Library | Description
| moment | Parse, validate, manipulate, and display dates
| lodash | Common utilities (String manipulation, arrays, ...)
| underscore | Like lodash?
| fontawesome | more css than js
| modernizr | browser compatibility
|jshint | Check JavaScript files for syntax errors
|===