= Accounted4 Developer's Guide
:toc:
:toc-position: left
:toclevels: 4
:numbered:

== Overview

Accounted4 is an asset management system targeted for small businesses. The foundation of the application is a general accounting system upon which business applications can be added in a modular fashion. Example modules:

* *CORE*: authentication, user account administration, notification engine, error handling, auditing, etc
* *GL*: an accounting subsytem based on tags, financial libraries
* *MTG*: a mortgage management subsystem to support lenders and mortgage brokers in keeping track of loans, payments, expenses, events, etc
* *SEC*: security managment subsystem for tracking assets such as:
** shares
** preferred shares
** bonds
** debentures
** options
* *PM* property management, rent collection, TIM

.Each module exposes a service layer api
This allows for the development of various clients (web, mobile, thick) and also allows for scripting and batching operations to be performed.

.Records should be versioned to avoid concurrent access clobbering
The client should be considered disconnected from the server. Any data on the client may be stale by the time the client calls a server-side service to send revised data back. By versioning each record, the service layer can ensure the record has not been changed by another session.

.A notification engine should be regularly polled
Event notification for is a core feature of the application. Modules register system and custom events with the notification engine and the client regularly polls the notification engine for updates.

.Application Security should be applied at the service level and at the data level
The application restricts access to services and also restricts access to the data that may be returned from services based on roles. Spring Security is used to controll access to services and data. The security data is stored in a backing database.

.Communication between the client and server should use Restful services over https
All data communication should be over https.

== Technology Stack

=== Documentation

JavaDocs is the preferred documentation method for server side Java code. Package documentation directories (`package-info.java`) include overview documentation and diagrams for the given subsystem. The `mvn site` goal can be used to generate the JavaDocs. https://github.com/asciidoctor/asciidoclet[AsciiDoclet] may be an option for prettifying JavaDocs.

http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/[AsciiDoctor] is the documentation tool for documentation external to the JavaDocs.

The http://sourceforge.net/projects/dia-installer/[Dia] diagram editor is used for diagrams.

=== Middle Tier Service Layer

A Java stack:

* *Git* for version control
* *Maven* for builds and dependency management
* *Spring* for Restful services, security, dependency injection container
* *json* for inter-component communication
* *JasperReports* for pdf report generation
* *junit* for testing
* *mockito* as the mocking library for unit testing
* *slf4j* as the logging facade
* *lombok* to reduce bean boilerplate

=== Datastore

A relational database:

* *Postgresql* for deployment
* *hsql* for dev environments?

=== Client Tier

An HTML5/Javascript client

* *Ember*, *Angular*, or *Thymeleaf*?
* *Bootstrap* / *LESS* for layout
* *Grunt* for building
* *Bower* for client library management
* *karma* for tests?

See http://www.toptal.com/angular-js/your-first-angularjs-app-part-2-scaffolding-building-and-testing[Scaffolding Overview]

Other technolgies considered:

* *zkos*: dependence on reflection made debugging too difficult
* *Vaadin*: still a lot of client server communication, do not have the freedom of a Javascript framework
* *extjs*: licensing issues

.Client library considerations:

* http://momentjs.com/[Moment] Parse, validate, manipulate, and display dates
* http://fortawesome.github.io/Font-Awesome/[Font Awesome] Fonts and icons
* http://modernizr.com/[Modernizr] Browser compatibility of features

== Modules

=== Core

==== Security Model
Accounted4 security is implemented with Spring Security which is invoked through a `ServletFilter`. Spring Security provides:

* *Authentication* for ascertaining who is using the system
* *Access-Control* for deciding which methods are accessible
* *Access Control Lists (ACL)* for deciding domain object accessibility

Spring Security provides a default schema definitions which include the tables:

* users
* authorities
* groups
* group_authorities
* group_members
* persistent_logins
* acl_sid
* acl_class
* acl_object_identity
* acl_entry

The schema is stored in a separate namespace. Views, grants, and search path can be used.

===== Authentication
The initial functionality is authentication for the start of a session.  The user information for authentication is stored in the backing database.

===== Middle Tier Services
Service methods can be secured with the `@Secured` annotation. The annotation attributes specify which roles are required for execution of the method.

===== Data
ACL

===== Client Services
Used as a convenience for conditionally displaying functionality on the client tier, but the strict enforcement is performed in the middle tier.

==== Notification Engine

=== Mortgage Administration
* Party definition (core, gl?)
* Asset definition
* Mortgage definition
* Payments and charges

==== Events
A notification window will be available to remind the user of upcoming events. For example:

* deposit due
* mortgage renewal
* cheques required
* verify property taxes paid on a property

The events are specific to an owner. They will remain in the notification window until acknowledged. Ideally there would be a link to the action which handles the event.

The event has a category, due date, message, and action link.

The events can be system generated or custom created. The definition of the event needs to specify the number of days advance notification required. It should also allow for the definition of recurring events.

=== Securities Management

.Attributes by Security Type
|===
|Attribute          |Stock  |Debenture  |Preferred  |Option

|Symbol             |x      |x          |x          |
|Company            |x      |x          |x          |x
|Average Purchase Price
                    |x	    |x          |x          |
|Shares             |x      |x          |x          |
|Money In           |x      |x          |x          |
|Market Price       |x      |x          |x          |
|Rate               |       |x          |x          |	 
|Issue Date         |       |x          |x          |
|Maturity Date      |       |x          |           |
|Conversion Date    |       |x          |           |
|Redemption Date    |       |x          |x          |	 
|Payment Dates      |       |x          |           |	 	 
|Underlying Symbol  |       |           |x          |x
|Underlying Symbol Market Price
                    |       |x          |           |x
|Conversion Price   |       |x          |           |	 	 
|Effective Rate     |       |x          |           |
|Prospectus url     |       |x          |x          |	 
|DBRS rating        |       |x  	 	|           |
|Notes              |x      |x          |x          |x 
|Last Dividend Amount
                    |x      |           |x          |
|Dividend Dates     |x      |           |x          |
|Face Value         |       |           |x          |
|Option Type (call or put) ||           |           |x
|Bought or Sold     |       |           |           |x
|Premium            |       |           |           |x
|Contracts          |       |           |           |x
|Strike Price       |       |           |           |x
|Underlying Symbol Price at purchase
                    |       |           |           |x
|===

== Datastore

=== Database conventions

The conventions are provided primarily for consistency sake.  Some of the reasoning behind the choice is provided with the convention.


* *Table names singular*
Plural names would make names longer. A table is a container or bag holding multiple items.

* *Table names lowercase*
When writing SQL, keywords are often denoted in UPPER CASE. Leaving table names in lower case helps the visibility in SQL statements.

* *Table names fully spelled out when possible*
Spelling a name like "USER" fully will be more clear than "USR". Mapping tables may result in table names which are too long and truncation is forced. In this case, truncate consistently (remove vowels, chose only 3 letters for a table, etc).

* *Always have a surrogate key or uuid*
The business key can be unique, multi-part, and have meaning. The surrogate key is used for internal purposes.

* *Column: Primary key "id" should be named <table_name>_id*
_id_ would be sufficient, but it leaves joins in SQL statements less clear. i.e. if we assume table `user` is aliased by `a` and a table aliased by `b` has a fk reference to `a`, then `a.user_id = b.user_id` is more clear than `a.id = b.user_id`. So table `use`" should have a `user_id` rather than just `id` for the pk. If table inheritance or generation tools are to be used, having a consistent `id` as the pk for all tables might make more sense.

* *Use underscores (`_`) to separate words in names*
For example `USER_ACCOUNT`


* *Explicit join notation should be used*
For example: `SELECT * FROM tablea a JOIN tableb b ON (a.tablea_id = b.tablea_id)`  It is the preferred convention, it makes join syntax more clear, it allows easier removal of joined parts when debugging.

* *DML through stored procedures*
The primary reason for using stored procedures to interface with the data tables is to provide the ability to change the implementation (ie table structures) without necessarily changing the api. Putting business logic into the stored procedure is not the goal and can be left for the middle tier.

=== Auditing

=== Name spacing via schemas

== Client

=== To install a Client Package

Add dependency to `bower.json`:

[source,json]
----
{
  "name": "Accounted4",
  "version": "0.3.2",
  "devDependencies": {
    "angular": "^1.3",
    "angular-mocks": "^1.2",
    "bootstrap": "~3.3",
    "angular-bootstrap": "~0.11.0",
    "angular-ui-router": "~0.2",
    "angular-sanitize": "~1.3.13",
    "angular-dialog-service": "https://github.com/m-e-conroy/angular-dialog-service.git#5.2.6"
  },
  "dependencies": {}
}
----

Perform an install with `Bower`:

[source,bash]
----
gheinze@gheinze-t410:~/scratch/a4ac$ bower install angular-sanitize
bower angular-sanitize#*        cached git://github.com/angular/bower-angular-sanitize.git#1.3.13
bower angular-sanitize#*      validate 1.3.13 against git://github.com/angular/bower-angular-sanitize.git#*
gheinze@gheinze-t410:~/scratch/a4ac$ bower list
bower check-new     Checking for new versions of the project dependencies..
Accounted4#0.3.2 /home/gheinze/scratch/a4ac
├── angular#1.3.13 (1.4.0-build.3834+sha.75725b4 available)
├─┬ angular-bootstrap#0.11.2 (latest is 0.12.0)
│ └── angular#1.3.13 (1.4.0-build.3834+sha.75725b4 available)
├─┬ angular-dialog-service#5.2.6
│ ├── angular#1.3.13 (1.4.0-build.3834+sha.75725b4 available)
│ ├── angular-bootstrap#0.11.2 (latest is 0.12.0)
│ ├─┬ angular-sanitize#1.3.13 (1.4.0-build.3834+sha.75725b4 available)
│ │ └── angular#1.3.13 (latest is 1.4.0-build.3834+sha.75725b4)
│ ├── angular-translate#2.1.0 (latest is 2.6.0)
│ └── bootstrap#3.3.2
├─┬ angular-mocks#1.3.13 (1.4.0-build.3834+sha.75725b4 available)
│ └── angular#1.3.13
├─┬ angular-ui-router#0.2.13
│ └── angular#1.3.13 (1.4.0-build.3834+sha.75725b4 available)
└─┬ bootstrap#3.3.2
  └── jquery#2.1.3
----

Ensure vendor file is also included in Grunt `vendor_files` section of `build.config.js`. We have to specify it because the vendor may have multiple files and we don't know which one to include in the build:

[source,json]
----
  vendor_files: {
    js: [
      'vendor/angular/angular.js',
      'vendor/ui-bootstrap-custom/ui-bootstrap-custom-0.1.0-SNAPSHOT.js',
      'vendor/angular-bootstrap/ui-bootstrap-tpls.min.js',
      'vendor/placeholders/angular-placeholders-0.0.1-SNAPSHOT.min.js',
      'vendor/angular-sanitize/angular-sanitize.min.js', // required by dialogs
      'vendor/angular-dialog-service/dist/dialogs.min.js',
      'vendor/angular-ui-router/release/angular-ui-router.js',
      'vendor/angular-ui-utils/modules/route/route.js'
    ],
    css: [
    ],
    assets: [
    ]
  }
----

Then do the grunt build.

== Framework Notes

== Apendix

=== Application Security Terminology

See http://stackoverflow.com/questions/4989063/what-is-the-meaning-of-subject-vs-user-vs-principal-in-a-security-context[SO Subject/Principal/User]

These are hierarchical in the way that genus, species and individual are hierarchical.

* *Subject* - In a security context, a subject is any entity that requests access to an object. These are generic terms used to denote the thing requesting access and the thing the request is made against. When you log onto an application you are the subject and the application is the object. When someone knocks on your door the visitor is the subject requesting access and your home is the object access is requested of.

* *Principal* - A subset of subject that is represented by an account, role or other unique identifier. When we get to the level of implementation details, principals are the unique keys we use in access control lists. They may represent human users, automation, applications, connections, etc.

* *User* - A subset of principal usually referring to a human operator. The distinction is blurring over time because the words "user" or "user ID" are commonly interchanged with "account". However, when you need to make the distinction between the broad class of things that are principals and the subset of these that are interactive operators driving transactions in a non-deterministic fashion, "user" is the right word.

Subject/Object inherits from the same terms as used in grammar. In a sentence the subject is the actor and the object is the thing acted on. In this sense the use has been around since before computers were invented. In a security context, a subject is anything that can make a request. As noted above, this need not be limited to IT security and so is a very broad classification. The interesting thing is that subject implies object. Without an object, there is no subject.

Principals are what subjects resolve to. When you present your credit card you are the subject and the account number is the principal. In other contexts your user ID or state-issued identification is your principal. But principals can be associated with many types of subject that are not people. When applications make requests for system-level functions the principal may the signer of a signed executable code module but even in that case the user driving the request is still the subject.

User is more specific than subject or principal in that it usually refers to an interactive operator. That is why we have a graphical User Interface and not a Graphical Principal Interface. A user is an instance of subject that resolves to a principal. A single user may resolve to any number of principals but any principal is expected to resolve to a single user (assuming people observe the requirement not to share IDs). In the example above, the signer of an executable code module is definitely not the user, but it is a valid principal. The interactive operator trying to get the module loaded is the user.

As noted in the comments, even the authoritative sources do not agree on these terms. I searched NIST, SANS, IEEE, MITRE and several "quasi-authoritative" sources such as security exam guides while preparing this response. No single source that I found which was at least quasi-authoritative covered all three terms and all differed significantly in their usage. This is my take on how the terms should be used but from a practical standpoint, when you are poring over a manual in the middle of the night, the definitions tend to be whatever the vendor or writer say they are. Hopefully though responses here will provide enough insight to navigate the waters and parse any security document using these terms.

=== General Application Considerations

Things to think about when checking in code:

* *Robustness*: are the units simple, clear, tested, and unlikely to break?
* *Maintainability*
* *Performance*
* *Scalability*: can we design in such a way that when we need more processing power we can simply slap in another machine and start up another instance (joining a cluster?)  Allows for failure of single components.
* *Reliability*
* *Testability* can the unit be easily tested in isolation with mocked components?
* *efficient use of hardware resources*
* *Reduce code redundancy*
* *Portablility*: reduce system dependencies
* *Prefer RAM to File IO*
* *Recoverablility*: application should clean up state after a failure
* *Metrics* inevitably there will be a request for metrics, incorporate into system to start, perhaps through a special logger, in a machine readable format
* *Documentation*:  can it be built into the system in order to create dynamic docs
* *Automation*
* *Logging*
* *Security*

include::NPM.asc[]

include::Bower.asc[]

include::Grunt.asc[]

See also `Karma` test runner running `Jasmine` tests and having `Live Reload` enabled.